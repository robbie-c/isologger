{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/isologger.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"isologger.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\nvar levels = {\n  notset: 'notset',\n  debug: 'debug',\n  log: 'log',\n  info: 'info',\n  warn: 'warn',\n  error: 'error'\n};\n\nvar levelNumericToString = {\n  0: 'notset',\n  10: 'debug',\n  15: 'log',\n  20: 'info',\n  30: 'warn',\n  40: 'error'\n};\n\nvar levelStringToNumeric = {\n  notset: 0,\n  debug: 10,\n  log: 15,\n  info: 20,\n  warn: 30,\n  error: 40\n};\n\nfunction LogEvent(level, args) {\n  this.level = level;\n  this.args = args;\n  this.functionName = null;\n  this.fileName = null;\n  this.lineNumber = null;\n  this.columnNumber = null;\n  this.timestamp = null;\n}\n\nLogEvent.prototype.attachCallStackFrame = function attachCallStackFrame(callStackFrame) {\n  if (callStackFrame) {\n    if (callStackFrame.getFunctionName) {\n      this.functionName = callStackFrame.getFunctionName();\n    }\n    if (callStackFrame.getFileName) {\n      this.fileName = callStackFrame.getFileName();\n    }\n    if (callStackFrame.getLineNumber) {\n      this.lineNumber = callStackFrame.getLineNumber();\n    }\n    if (callStackFrame.getColumnNumber) {\n      this.columnNumber = callStackFrame.getColumnNumber();\n    }\n  }\n};\nLogEvent.prototype.getTimestamp = function getTimestamp() {\n  this.timestamp = Date.now();\n};\n\nfunction Logger(opts) {\n  this.lineNumbers = opts.lineNumbers || false;\n  this.timestamps = opts.timestamps || false;\n\n  this.outputs = [];\n}\n\nLogger.prototype.addOutput = function (level, output) {\n  console.log('add ouput', level, output);\n  this.outputs.push([level, output]);\n};\nLogger.prototype._createLogEvent = function (level, args, callSite) {\n  var event = new LogEvent(level, args);\n\n  if (callSite) {\n    event.attachCallStackFrame(callSite);\n  }\n\n  if (this.timestamps) {\n    event.getTimestamp();\n  }\n\n  this.produce(event);\n};\nLogger.prototype._myPrepareStackTrace = function (_, stack) {\n  // don't format it, just return raw CallSite objects\n  return stack;\n};\nLogger.prototype._getCallerCallSite = function () {\n  console.log('try to get frame', Error.captureStackTrace, Error.prepareStackTrace );\n  if (Error.captureStackTrace) {\n    var err = new Error();\n\n    var originalPrepareStackTrace = Error.prepareStackTrace;\n    Error.prepareStackTrace = this._myPrepareStackTrace;\n    Error.captureStackTrace(err, null);\n    var stack = err.stack;\n    Error.prepareStackTrace = originalPrepareStackTrace;\n\n    console.log('got frame');\n\n    // we want the caller's caller\n    return stack[2];\n  }\n};\nLogger.prototype.debug = function () {\n  var stackFrame = this.lineNumbers ? this._getCallerCallSite() : null;\n  this._createLogEvent(levels.debug, arguments, stackFrame)\n};\nLogger.prototype.log = function () {\n  var stackFrame = this.lineNumbers ? this._getCallerCallSite() : null;\n  this._createLogEvent(levels.log, arguments, stackFrame)\n};\nLogger.prototype.info = function () {\n  var stackFrame = this.lineNumbers ? this._getCallerCallSite() : null;\n  this._createLogEvent(levels.info, arguments, stackFrame)\n};\nLogger.prototype.warn = function () {\n  var stackFrame = this.lineNumbers ? this._getCallerCallSite() : null;\n  this._createLogEvent(levels.warn, arguments, stackFrame)\n};\nLogger.prototype.error = function () {\n  var stackFrame = this.lineNumbers ? this._getCallerCallSite() : null;\n  this._createLogEvent(levels.error, arguments, stackFrame)\n};\n\nLogger.prototype.produce = function (logEvent) {\n  console.log('produce');\n  this.outputs.forEach(function (arr) {\n    var level = arr[0];\n    var output = arr[1];\n    console.log('got output with', level);\n    if (shouldReceive(logEvent.level, level)) {\n      if (typeof output === 'function') {\n        output(logEvent);\n      } else if (typeof output.consume === 'function') {\n        output.consume(logEvent);\n      }\n    } else {\n      console.log('should not receive');\n    }\n  });\n};\n\nfunction shouldReceive(eventLogLevel, outputLogLevel) {\n  var eventNumeric = levelStringToNumeric[eventLogLevel];\n  var outputNumeric = levelStringToNumeric[outputLogLevel];\n  console.log(eventNumeric, outputNumeric);\n  return (eventNumeric >= outputNumeric) || outputNumeric === levels.notset;\n}\n\nfunction ConsoleOutput () {\n}\nConsoleOutput.prototype.consume = function consume(logEvent) {\n\n  if (typeof console !== 'undefined') {\n    var args = [];\n\n    var func;\n    switch (logEvent.level) {\n      case levels.error:\n        func = console.error;\n        break;\n      case levels.warn:\n        func = console.warn;\n        break;\n      case levels.info:\n        func = console.info;\n        break;\n      case levels.log:\n        func = console.log;\n        break;\n      case levels.debug:\n        func = console.debug;\n        break;\n      default:\n        func = console.log;\n        args.push(logEvent.level);\n        break;\n    }\n\n    console.log('timestamp', logEvent.timestamp);\n    if (logEvent.timestamp) {\n      args.push(logEvent.timestamp);\n    }\n\n    if (logEvent.functionName || logEvent.fileName) {\n      var locationString = '';\n\n      if (logEvent.functionName) {\n        locationString += logEvent.functionName;\n      }\n\n      if (logEvent.fileName) {\n        if (locationString) {\n          locationString += ' ';\n        }\n        locationString += logEvent.fileName;\n        if (logEvent.lineNumber) {\n          locationString += '::' + logEvent.lineNumber;\n          if (logEvent.columnNumber) {\n            locationString += '::' + logEvent.columnNumber;\n          }\n        }\n      }\n\n      if (locationString) {\n        args.push(locationString);\n      }\n    }\n\n    args.push.apply(args, logEvent.args);\n\n    if (func) {\n      func.apply(console, args);\n    }\n  }\n};\n\nmodule.exports = {\n  levels: levels,\n  Logger: Logger,\n  ConsoleOutput: ConsoleOutput\n};\n"]}